name: SQLMesh CI 

on:
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened, closed]
  push:
    branches: [ "main" ]

jobs:
  # ---------------------
  # Common setup (reusable job)
  # ---------------------
  setup:
    runs-on: self-hosted
    timeout-minutes: 20
    outputs:
      python-version: ${{ steps.set-python.outputs.version }}
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: set-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "sqlmesh[web,postgres,github]>=0.50.0,<0.60.0"

  # ---------------------
  # Run SQLMesh plan (staging) in PRs
  # ---------------------
  plan:
    needs: setup
    runs-on: self-hosted
    timeout-minutes: 20
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SCHEMA: staging_${{ github.event.pull_request.number }}
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:
      - uses: actions/checkout@v3
      - run: sqlmesh plan --environment staging --no-prompts --skip-backfill --verbose --create-pr-comment

  # ---------------------
  # Run SQLMesh tests (staging) in PRs
  # ---------------------
  test:
    needs: setup
    runs-on: self-hosted
    timeout-minutes: 20
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SCHEMA: staging_${{ github.event.pull_request.number }}
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    steps:
      - uses: actions/checkout@v3
      - run: sqlmesh test --environment staging --verbose

  # ---------------------
  # Cleanup staging schema when PR is closed
  # ---------------------
  cleanup:
    runs-on: self-hosted
    timeout-minutes: 10
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SCHEMA: staging_${{ github.event.pull_request.number }}
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - run: |
          psql "host=$POSTGRES_HOST port=$POSTGRES_PORT dbname=$POSTGRES_DB user=$POSTGRES_USER password=$POSTGRES_PASSWORD" \
          -c "DROP SCHEMA IF EXISTS $SCHEMA CASCADE;"

  # ---------------------
  # Deploy to Production when merged into main
  # ---------------------
  deploy:
    needs: setup
    runs-on: self-hosted
    timeout-minutes: 20
    env:
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      SCHEMA: public
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    steps:
      - uses: actions/checkout@v3
      - run: sqlmesh plan --environment prod --no-prompts --skip-backfill --verbose --auto-apply
