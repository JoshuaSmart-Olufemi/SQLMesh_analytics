name: SQLMesh CI

on:
  pull_request:
    branches: [ "main" ]
    types: [opened, synchronize, reopened, closed]  # add closed for cleanup
  push:
    branches: [ "main" ]

jobs:
  sqlmesh:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install "sqlmesh[web,postgres,github]"; fi

      # ---------------------
      # Validation on PRs (Dynamic Staging Schema)
      # ---------------------
      - name: Run SQLMesh plan on Dynamic Staging
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          sqlmesh plan --environment staging --no-prompts --skip-backfill --no-gaps --verbose --create-pr-comment

      - name: Apply SQLMesh changes on Dynamic Staging
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          sqlmesh apply --environment staging --no-prompts --skip-backfill --no-gaps --verbose

      - name: Run SQLMesh tests (Dynamic Staging)
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: sqlmesh test --environment staging --verbose

      # ---------------------
      # Cleanup Staging Schema when PR is closed
      # ---------------------
      - name: Drop staging schema for closed PR
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          psql "host=$POSTGRES_HOST dbname=$POSTGRES_DB user=$POSTGRES_USER password=$POSTGRES_PASSWORD" \
          -c "DROP SCHEMA IF EXISTS staging_${PR_NUMBER} CASCADE;"

      # ---------------------
      # Deployment on merge to main (Production)
      # ---------------------
      - name: Run SQLMesh apply on Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        run: |
          sqlmesh apply --environment prod --no-prompts --skip-backfill --no-gaps --verbose

